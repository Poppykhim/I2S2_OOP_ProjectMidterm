/*
    * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
    * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui.MenuGroup;

import DAO.ProductDAO;
import Storage.Product;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.plaf.basic.BasicScrollBarUI;
import java.awt.Dimension;
import java.awt.Menu;

/**
 *
 * @author User
 */
public class MenuSection extends javax.swing.JPanel {

    /**
     * Creates new form MenuSection
     */
    private final JPanel categoryContainer;
    private final JPanel productContainer;
    public static MenuSection menuSection;
    private final MenuRight rightPanel;

    public MenuSection(MenuRight rightPanel) {
        initComponents();
        this.rightPanel = rightPanel;

        // 1. Category panel inside scroll
        categoryContainer = new JPanel();
        categoryContainer.setLayout(new java.awt.GridLayout(1, 0, 2, 2)); // 1 row, auto columns
        CategoriesPanel.setViewportView(categoryContainer); // add to scroll
        CategoriesPanel.setBorder(null);
        // 2. Product panel inside scroll
        productContainer = new RoundedPanel(35);
        productContainer.setLayout(new java.awt.GridLayout(0, 2, 10, 5)); // 3 columns, auto-rows
        productContainer.setBackground(new java.awt.Color(255, 189, 89));
        productContainer.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        MenuPanel.setBorder(null);
        MenuPanel.setViewportView(productContainer); // add to scroll
        MenuPanel.getVerticalScrollBar().setUnitIncrement(16);

        // MenuPanel.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        SmoothScrollHelper.makeScrollSmooth(MenuPanel);
        loadCategoryButtons();
        styleScrollBar(MenuPanel.getVerticalScrollBar());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        MenuPanel = new javax.swing.JScrollPane();
        CategoriesPanel = new javax.swing.JScrollPane();

        jPanel1.setPreferredSize(new java.awt.Dimension(640, 448));

        jLabel1.setFont(new java.awt.Font("Segoe UI Historic", 1, 18)); // NOI18N
        jLabel1.setText("Coffee Menu");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(42, 42, 42)
                                                .addComponent(jLabel1))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(32, 32, 32)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(MenuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                                                        .addComponent(CategoriesPanel))))
                                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(CategoriesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)
                                .addGap(25, 25, 25)
                                .addComponent(MenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>    

    public void loadCategoryButtons() {
        categoryContainer.removeAll(); // Clear existing buttons
        ProductDAO DAO = new ProductDAO();
        List<String> categories = DAO.fetchCategories();

        int totalWidth = 589; // Fixed width
        int spacing = 10; // Horizontal gap from layout
        int totalGap = (categories.size() - 1) * spacing;
        int buttonWidth = (totalWidth - totalGap) / categories.size();

        System.out.println("Button width: " + buttonWidth);
        for (String cat : categories) {
            JButton btn = new RoundedButton(cat, 20);
            btn.setFocusPainted(false);
            btn.setPreferredSize(new java.awt.Dimension(buttonWidth, 20)); // shrink evenly
            btn.setBackground(new java.awt.Color(255, 153, 51));
            btn.addActionListener(e -> loadProductsByCategory(cat));
            categoryContainer.add(btn);
        }
        categoryContainer.revalidate();
        productContainer.repaint();
    }

    public void loadProductsByCategory(String categoryName) {
        productContainer.removeAll();
        ProductDAO DAO = new ProductDAO();
        List<Product> filtered = DAO.getProductsByCategory(categoryName);
        for (Product p : filtered) {
            productContainer.add(new ProductPanel(p));
        }
        productContainer.revalidate();
        productContainer.repaint();
    }

    public class ProductPanel extends RoundedPanel {

        public ProductPanel(Product product) {
            super(30);
            setLayout(new BorderLayout(10, 0));
            // setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));
            setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
            setBackground(Color.WHITE);
            setPreferredSize(new java.awt.Dimension(160, 100));
            JLabel imageLabel = new JLabel();
            if (product.getImagePath() != null && !product.getImagePath().isEmpty()) {
                String normalizedPath = product.getImagePath().replace("\\", "/");
                imageLabel.setIcon(resizeImage(normalizedPath, 50, 50));
                System.out.println("Image path: " + product.getImagePath());
                System.out.println("Image path: " + normalizedPath);
            } else {
                imageLabel.setIcon(resizeImage("images/1753664187921_No_Image.jpg", 50, 50)); // default placeholder
            }
            JLabel nameLabel = new JLabel(product.getName(), SwingConstants.CENTER);
            JLabel localNameLabel = new JLabel(product.getLocalName(), SwingConstants.CENTER);
            JLabel priceLabel = new JLabel("Price: $" + product.getPrice(), SwingConstants.CENTER);
            JLabel quantityLabel = new JLabel("Qty: " + product.getQuantity(), SwingConstants.CENTER);
            JButton placeOrderButton = new RoundedButton("+", 45);
            placeOrderButton.setPreferredSize(new Dimension(42, 42));
            placeOrderButton.setBackground(new Color(255, 102, 0));
            placeOrderButton.setForeground(Color.WHITE);
            placeOrderButton.setFocusPainted(false);
            placeOrderButton.addActionListener(e -> {
                JFrame parentFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
                ProductCustomizationDialog dialog = new ProductCustomizationDialog(parentFrame);
                dialog.setVisible(true);

                if (dialog.isConfirmed()) {
                    String sugar = dialog.getSugarLevel();
                    String ice = dialog.getIceLevel();
                    rightPanel.addProductItem(product.getName(), 1, product.getPrice(), ice, sugar, "");
                }
            });

            JPanel eastPanel = new JPanel();
            eastPanel.setLayout(new BorderLayout());
            eastPanel.setOpaque(false);  // transparent panel
            eastPanel.add(Box.createVerticalGlue(), BorderLayout.CENTER);  // push to bottom
            eastPanel.add(placeOrderButton, BorderLayout.SOUTH);
            eastPanel.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 5));
            // Layout all in a vertical stack
            Box box = Box.createVerticalBox();
            box.add(Box.createVerticalStrut(10));
            box.add(nameLabel);
            box.add(localNameLabel);
            box.add(priceLabel);
            box.add(quantityLabel);
            add(eastPanel, BorderLayout.EAST);
            add(box, BorderLayout.CENTER);
            add(imageLabel, BorderLayout.WEST);
        }
    }

    public ImageIcon resizeImage(String imagePath, int width, int height) {
        ImageIcon icon = new ImageIcon(imagePath);
        Image img = icon.getImage();
        Image resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH);
        return new ImageIcon(resizedImg);
    }

    public class RoundedButton extends JButton {

        private final int radius;

        public RoundedButton(String text, int radius) {
            super(text);
            this.radius = radius;
            setOpaque(false);
            setFocusPainted(false);
            setBorderPainted(false);
            setContentAreaFilled(false); // prevent default background fill
        }

        @Override
        protected void paintComponent(Graphics g) {
            Graphics2D g2 = (Graphics2D) g.create();
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            // Background
            g2.setColor(getBackground());
            g2.fillRoundRect(0, 0, getWidth(), getHeight(), radius, radius);

            super.paintComponent(g);
        }

        @Override
        public void setBackground(Color bg) {
            super.setBackground(bg);
            repaint();
        }
    }

    public class RoundedPanel extends JPanel {

        private int cornerRadius = 20; // radius of the rounded corner

        public RoundedPanel(int radius) {
            super();
            this.cornerRadius = radius;
            setOpaque(false); // needed to see rounded shape
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);

            // enable anti-aliasing for smooth corners
            Graphics2D g2 = (Graphics2D) g.create();
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            // set background color
            g2.setColor(getBackground());

            // draw rounded rectangle
            g2.fillRoundRect(0, 0, getWidth(), getHeight(), cornerRadius, cornerRadius);

            g2.dispose();
        }
    }

    public class SmoothScrollHelper {

        public static void makeScrollSmooth(JScrollPane scrollPane) {
            scrollPane.addMouseWheelListener(new MouseWheelListener() {
                @Override
                public void mouseWheelMoved(MouseWheelEvent e) {
                    JScrollBar bar = scrollPane.getVerticalScrollBar();
                    int scrollAmount = e.getUnitsToScroll() * 5; // Lower = smoother

                    // For touchpad support (fractional scrolling)
                    if (e.getScrollType() == MouseWheelEvent.WHEEL_UNIT_SCROLL) {
                        bar.setValue(bar.getValue() + scrollAmount);
                    }
                }
            });
        }
    }

    private void styleScrollBar(javax.swing.JScrollBar scrollBar) {
        scrollBar.setUI(new BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = new java.awt.Color(255, 153, 51);
            }

            @Override
            protected Dimension getMinimumThumbSize() {
                return new Dimension(30, 30); // minimum size of the scrollbar thumb
            }
        });
    }

    public MenuSection getMenuSection() {
        return menuSection;
    }

    // Variables declaration - do not modify                     
    private javax.swing.JScrollPane CategoriesPanel;
    private javax.swing.JScrollPane MenuPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration                   
}
